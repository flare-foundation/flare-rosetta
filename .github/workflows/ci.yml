name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  go_version: 1.18.5

jobs:

  define-env:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      IMAGE_TAG: ${{ steps.ct_image_tag.outputs.IMAGE_TAG }}
      IMAGE_PATH_0: ghcr.io/${{ github.repository }}/flare-rosetta:${{ steps.ct_image_tag.outputs.IMAGE_TAG }}-${{ github.run_number }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - id: ct_image_tag
      run: echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  build-container:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
    - define-env
    steps:
    - uses: actions/checkout@v3
    - uses: docker/setup-qemu-action@v2
    - uses: docker/setup-buildx-action@v2

    - name: Login to ghcr.io
      shell: bash
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io --username ${{ github.actor }} --password-stdin

    - name: Build and push container image
      shell: bash
      run: |
        docker build --progress=plain --no-cache --build-arg ROSETTA_SRC=. --tag ${{ needs.define-env.outputs.IMAGE_PATH_0 }} -f ./server/Dockerfile .
        docker push ${{ needs.define-env.outputs.IMAGE_PATH_0 }}
  test-container:
    runs-on: ubuntu-latest
    needs:
    - build-container
    - define-env
    services:
      flare_node:
        image: ${{ needs.define-env.outputs.IMAGE_PATH_0 }}
        ports:
          - 9650:9650
          - 9651:9651
          - 8080:8080
        env:
          DEBUG: true
          NETWORK_ID: localflare
          FLARE_LOCAL_TXS_ENABLED: true
          FLARE_EXTRA_ARGUMENTS: --staking-tls-cert-file=/app/flare/staking/local/staker1.crt --staking-tls-key-file=/app/flare/staking/local/staker1.key
        options: >-
          --health-interval 15s
          --health-timeout 15s
          --health-retries 10
          --health-start-period 30s
    strategy:
      fail-fast: false
      matrix:
        index: [1, 2, 3, 4, 5]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.go_version }}
    - run: sudo apt update -y && sudo apt install curl -y

    - name: Wait for go-flare to bind to port
      shell: bash
      run: curl -s --retry 6 --retry-delay 10 --retry-connrefused http://localhost:9650 || exit 1

    - name: Import testnet
      shell: bash
      run: |
        curl -s -o /tmp/test_pchain_import.sh https://raw.githubusercontent.com/flare-foundation/go-flare/114017731f4f8f6192a4df2748da914c0257e16b/avalanchego/scripts/test_pchain_import.sh
        sed -i 's/localhost/127.0.0.1/g' /tmp/test_pchain_import.sh
        sed -i 's/ | jq .//g' /tmp/test_pchain_import.sh
        bash /tmp/test_pchain_import.sh
        while [[ "$(curl -X POST --data '{ "jsonrpc": "2.0", "method": "platform.getHeight", "params": {}, "id": 1 }' -H 'content-type:application/json;' 127.0.0.1:9650/ext/bc/P | jq -r .result.height)" != "2" ]]
        do
          echo "Block height not reached.. Block Height:" $(curl -X POST --data '{ "jsonrpc": "2.0", "method": "platform.getHeight", "params": {}, "id": 1 }' -H 'content-type:application/json;' 127.0.0.1:9650/ext/bc/P | jq -r .result.height)
          sleep 1
        done
    - name: Wait for rosetta to bind to port
      shell: bash
      run: curl -s --retry 6 --retry-delay 10 --retry-connrefused http://localhost:8080 || exit 1

    - name: List networks Rosetta API lists
      shell: bash
      run: |
        curl -s --location --request POST 'http://127.0.0.1:8080/network/list' \
          --header 'Content-Type: application/json' \
          --data-raw '{ "metadata" : {} }' \
          --fail || exit 1
    - name: Install rosetta cli
      shell: bash
      run: |
        mkdir -p /tmp/rosetta
        curl -o /tmp/rosetta/install.sh -sSfL https://raw.githubusercontent.com/coinbase/rosetta-cli/d5ccb7c5cdfc60cd23ff7cb010dea1bf19f80547/scripts/install.sh
        bash /tmp/rosetta/install.sh -b /tmp/rosetta/
    - name: Run rosetta-cli check:construction
      timeout-minutes: 5
      shell: bash
      run: |
        pushd server/rosetta-cli-conf/localflare
        /tmp/rosetta/rosetta-cli --configuration-file=./config.json check:construction
        popd






  test-make_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
      - run: (cd server && make build)

  test-make_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
      - run: (cd server && make test)